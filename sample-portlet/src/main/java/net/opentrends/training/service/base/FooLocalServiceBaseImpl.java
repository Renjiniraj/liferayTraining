package net.opentrends.training.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import com.liferay.portlet.asset.service.persistence.AssetEntryPersistence;
import com.liferay.portlet.asset.service.persistence.AssetTagPersistence;

import net.opentrends.training.model.Foo;
import net.opentrends.training.service.FooLocalService;
import net.opentrends.training.service.persistence.EmployeePersistence;
import net.opentrends.training.service.persistence.FooPersistence;
import net.opentrends.training.service.persistence.ManagerPersistence;
import net.opentrends.training.service.persistence.Student1Persistence;
import net.opentrends.training.service.persistence.departmentPersistence;
import net.opentrends.training.service.persistence.marksPersistence;
import net.opentrends.training.service.persistence.studentFinder;
import net.opentrends.training.service.persistence.studentPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the foo local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link net.opentrends.training.service.impl.FooLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see net.opentrends.training.service.impl.FooLocalServiceImpl
 * @see net.opentrends.training.service.FooLocalServiceUtil
 * @generated
 */
public abstract class FooLocalServiceBaseImpl extends BaseLocalServiceImpl
    implements FooLocalService, IdentifiableBean {
    @BeanReference(type = net.opentrends.training.service.departmentLocalService.class)
    protected net.opentrends.training.service.departmentLocalService departmentLocalService;
    @BeanReference(type = net.opentrends.training.service.departmentService.class)
    protected net.opentrends.training.service.departmentService departmentService;
    @BeanReference(type = departmentPersistence.class)
    protected departmentPersistence departmentPersistence;
    @BeanReference(type = net.opentrends.training.service.EmployeeLocalService.class)
    protected net.opentrends.training.service.EmployeeLocalService employeeLocalService;
    @BeanReference(type = net.opentrends.training.service.EmployeeService.class)
    protected net.opentrends.training.service.EmployeeService employeeService;
    @BeanReference(type = EmployeePersistence.class)
    protected EmployeePersistence employeePersistence;
    @BeanReference(type = net.opentrends.training.service.FooLocalService.class)
    protected net.opentrends.training.service.FooLocalService fooLocalService;
    @BeanReference(type = net.opentrends.training.service.FooService.class)
    protected net.opentrends.training.service.FooService fooService;
    @BeanReference(type = FooPersistence.class)
    protected FooPersistence fooPersistence;
    @BeanReference(type = net.opentrends.training.service.ManagerLocalService.class)
    protected net.opentrends.training.service.ManagerLocalService managerLocalService;
    @BeanReference(type = ManagerPersistence.class)
    protected ManagerPersistence managerPersistence;
    @BeanReference(type = net.opentrends.training.service.marksLocalService.class)
    protected net.opentrends.training.service.marksLocalService marksLocalService;
    @BeanReference(type = net.opentrends.training.service.marksService.class)
    protected net.opentrends.training.service.marksService marksService;
    @BeanReference(type = marksPersistence.class)
    protected marksPersistence marksPersistence;
    @BeanReference(type = net.opentrends.training.service.studentLocalService.class)
    protected net.opentrends.training.service.studentLocalService studentLocalService;
    @BeanReference(type = net.opentrends.training.service.studentService.class)
    protected net.opentrends.training.service.studentService studentService;
    @BeanReference(type = studentPersistence.class)
    protected studentPersistence studentPersistence;
    @BeanReference(type = studentFinder.class)
    protected studentFinder studentFinder;
    @BeanReference(type = net.opentrends.training.service.Student1LocalService.class)
    protected net.opentrends.training.service.Student1LocalService student1LocalService;
    @BeanReference(type = net.opentrends.training.service.Student1Service.class)
    protected net.opentrends.training.service.Student1Service student1Service;
    @BeanReference(type = Student1Persistence.class)
    protected Student1Persistence student1Persistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryLocalService.class)
    protected com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetEntryService.class)
    protected com.liferay.portlet.asset.service.AssetEntryService assetEntryService;
    @BeanReference(type = AssetEntryPersistence.class)
    protected AssetEntryPersistence assetEntryPersistence;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetTagLocalService.class)
    protected com.liferay.portlet.asset.service.AssetTagLocalService assetTagLocalService;
    @BeanReference(type = com.liferay.portlet.asset.service.AssetTagService.class)
    protected com.liferay.portlet.asset.service.AssetTagService assetTagService;
    @BeanReference(type = AssetTagPersistence.class)
    protected AssetTagPersistence assetTagPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private FooLocalServiceClpInvoker _clpInvoker = new FooLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link net.opentrends.training.service.FooLocalServiceUtil} to access the foo local service.
     */

    /**
     * Adds the foo to the database. Also notifies the appropriate model listeners.
     *
     * @param foo the foo
     * @return the foo that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Foo addFoo(Foo foo) throws SystemException {
        foo.setNew(true);

        return fooPersistence.update(foo);
    }

    /**
     * Creates a new foo with the primary key. Does not add the foo to the database.
     *
     * @param fooId the primary key for the new foo
     * @return the new foo
     */
    @Override
    public Foo createFoo(long fooId) {
        return fooPersistence.create(fooId);
    }

    /**
     * Deletes the foo with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param fooId the primary key of the foo
     * @return the foo that was removed
     * @throws PortalException if a foo with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Foo deleteFoo(long fooId) throws PortalException, SystemException {
        return fooPersistence.remove(fooId);
    }

    /**
     * Deletes the foo from the database. Also notifies the appropriate model listeners.
     *
     * @param foo the foo
     * @return the foo that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Foo deleteFoo(Foo foo) throws SystemException {
        return fooPersistence.remove(foo);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Foo.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return fooPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link net.opentrends.training.model.impl.FooModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return fooPersistence.findWithDynamicQuery(dynamicQuery, start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link net.opentrends.training.model.impl.FooModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return fooPersistence.findWithDynamicQuery(dynamicQuery, start, end,
            orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return fooPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return fooPersistence.countWithDynamicQuery(dynamicQuery, projection);
    }

    @Override
    public Foo fetchFoo(long fooId) throws SystemException {
        return fooPersistence.fetchByPrimaryKey(fooId);
    }

    /**
     * Returns the foo with the matching UUID and company.
     *
     * @param uuid the foo's UUID
     * @param  companyId the primary key of the company
     * @return the matching foo, or <code>null</code> if a matching foo could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Foo fetchFooByUuidAndCompanyId(String uuid, long companyId)
        throws SystemException {
        return fooPersistence.fetchByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the foo matching the UUID and group.
     *
     * @param uuid the foo's UUID
     * @param groupId the primary key of the group
     * @return the matching foo, or <code>null</code> if a matching foo could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Foo fetchFooByUuidAndGroupId(String uuid, long groupId)
        throws SystemException {
        return fooPersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the foo with the primary key.
     *
     * @param fooId the primary key of the foo
     * @return the foo
     * @throws PortalException if a foo with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Foo getFoo(long fooId) throws PortalException, SystemException {
        return fooPersistence.findByPrimaryKey(fooId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return fooPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the foo with the matching UUID and company.
     *
     * @param uuid the foo's UUID
     * @param  companyId the primary key of the company
     * @return the matching foo
     * @throws PortalException if a matching foo could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Foo getFooByUuidAndCompanyId(String uuid, long companyId)
        throws PortalException, SystemException {
        return fooPersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the foo matching the UUID and group.
     *
     * @param uuid the foo's UUID
     * @param groupId the primary key of the group
     * @return the matching foo
     * @throws PortalException if a matching foo could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Foo getFooByUuidAndGroupId(String uuid, long groupId)
        throws PortalException, SystemException {
        return fooPersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the foos.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link net.opentrends.training.model.impl.FooModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of foos
     * @param end the upper bound of the range of foos (not inclusive)
     * @return the range of foos
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Foo> getFoos(int start, int end) throws SystemException {
        return fooPersistence.findAll(start, end);
    }

    /**
     * Returns the number of foos.
     *
     * @return the number of foos
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getFoosCount() throws SystemException {
        return fooPersistence.countAll();
    }

    /**
     * Updates the foo in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param foo the foo
     * @return the foo that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Foo updateFoo(Foo foo) throws SystemException {
        return fooPersistence.update(foo);
    }

    /**
     * Returns the department local service.
     *
     * @return the department local service
     */
    public net.opentrends.training.service.departmentLocalService getdepartmentLocalService() {
        return departmentLocalService;
    }

    /**
     * Sets the department local service.
     *
     * @param departmentLocalService the department local service
     */
    public void setdepartmentLocalService(
        net.opentrends.training.service.departmentLocalService departmentLocalService) {
        this.departmentLocalService = departmentLocalService;
    }

    /**
     * Returns the department remote service.
     *
     * @return the department remote service
     */
    public net.opentrends.training.service.departmentService getdepartmentService() {
        return departmentService;
    }

    /**
     * Sets the department remote service.
     *
     * @param departmentService the department remote service
     */
    public void setdepartmentService(
        net.opentrends.training.service.departmentService departmentService) {
        this.departmentService = departmentService;
    }

    /**
     * Returns the department persistence.
     *
     * @return the department persistence
     */
    public departmentPersistence getdepartmentPersistence() {
        return departmentPersistence;
    }

    /**
     * Sets the department persistence.
     *
     * @param departmentPersistence the department persistence
     */
    public void setdepartmentPersistence(
        departmentPersistence departmentPersistence) {
        this.departmentPersistence = departmentPersistence;
    }

    /**
     * Returns the employee local service.
     *
     * @return the employee local service
     */
    public net.opentrends.training.service.EmployeeLocalService getEmployeeLocalService() {
        return employeeLocalService;
    }

    /**
     * Sets the employee local service.
     *
     * @param employeeLocalService the employee local service
     */
    public void setEmployeeLocalService(
        net.opentrends.training.service.EmployeeLocalService employeeLocalService) {
        this.employeeLocalService = employeeLocalService;
    }

    /**
     * Returns the employee remote service.
     *
     * @return the employee remote service
     */
    public net.opentrends.training.service.EmployeeService getEmployeeService() {
        return employeeService;
    }

    /**
     * Sets the employee remote service.
     *
     * @param employeeService the employee remote service
     */
    public void setEmployeeService(
        net.opentrends.training.service.EmployeeService employeeService) {
        this.employeeService = employeeService;
    }

    /**
     * Returns the employee persistence.
     *
     * @return the employee persistence
     */
    public EmployeePersistence getEmployeePersistence() {
        return employeePersistence;
    }

    /**
     * Sets the employee persistence.
     *
     * @param employeePersistence the employee persistence
     */
    public void setEmployeePersistence(EmployeePersistence employeePersistence) {
        this.employeePersistence = employeePersistence;
    }

    /**
     * Returns the foo local service.
     *
     * @return the foo local service
     */
    public net.opentrends.training.service.FooLocalService getFooLocalService() {
        return fooLocalService;
    }

    /**
     * Sets the foo local service.
     *
     * @param fooLocalService the foo local service
     */
    public void setFooLocalService(
        net.opentrends.training.service.FooLocalService fooLocalService) {
        this.fooLocalService = fooLocalService;
    }

    /**
     * Returns the foo remote service.
     *
     * @return the foo remote service
     */
    public net.opentrends.training.service.FooService getFooService() {
        return fooService;
    }

    /**
     * Sets the foo remote service.
     *
     * @param fooService the foo remote service
     */
    public void setFooService(
        net.opentrends.training.service.FooService fooService) {
        this.fooService = fooService;
    }

    /**
     * Returns the foo persistence.
     *
     * @return the foo persistence
     */
    public FooPersistence getFooPersistence() {
        return fooPersistence;
    }

    /**
     * Sets the foo persistence.
     *
     * @param fooPersistence the foo persistence
     */
    public void setFooPersistence(FooPersistence fooPersistence) {
        this.fooPersistence = fooPersistence;
    }

    /**
     * Returns the manager local service.
     *
     * @return the manager local service
     */
    public net.opentrends.training.service.ManagerLocalService getManagerLocalService() {
        return managerLocalService;
    }

    /**
     * Sets the manager local service.
     *
     * @param managerLocalService the manager local service
     */
    public void setManagerLocalService(
        net.opentrends.training.service.ManagerLocalService managerLocalService) {
        this.managerLocalService = managerLocalService;
    }

    /**
     * Returns the manager persistence.
     *
     * @return the manager persistence
     */
    public ManagerPersistence getManagerPersistence() {
        return managerPersistence;
    }

    /**
     * Sets the manager persistence.
     *
     * @param managerPersistence the manager persistence
     */
    public void setManagerPersistence(ManagerPersistence managerPersistence) {
        this.managerPersistence = managerPersistence;
    }

    /**
     * Returns the marks local service.
     *
     * @return the marks local service
     */
    public net.opentrends.training.service.marksLocalService getmarksLocalService() {
        return marksLocalService;
    }

    /**
     * Sets the marks local service.
     *
     * @param marksLocalService the marks local service
     */
    public void setmarksLocalService(
        net.opentrends.training.service.marksLocalService marksLocalService) {
        this.marksLocalService = marksLocalService;
    }

    /**
     * Returns the marks remote service.
     *
     * @return the marks remote service
     */
    public net.opentrends.training.service.marksService getmarksService() {
        return marksService;
    }

    /**
     * Sets the marks remote service.
     *
     * @param marksService the marks remote service
     */
    public void setmarksService(
        net.opentrends.training.service.marksService marksService) {
        this.marksService = marksService;
    }

    /**
     * Returns the marks persistence.
     *
     * @return the marks persistence
     */
    public marksPersistence getmarksPersistence() {
        return marksPersistence;
    }

    /**
     * Sets the marks persistence.
     *
     * @param marksPersistence the marks persistence
     */
    public void setmarksPersistence(marksPersistence marksPersistence) {
        this.marksPersistence = marksPersistence;
    }

    /**
     * Returns the student local service.
     *
     * @return the student local service
     */
    public net.opentrends.training.service.studentLocalService getstudentLocalService() {
        return studentLocalService;
    }

    /**
     * Sets the student local service.
     *
     * @param studentLocalService the student local service
     */
    public void setstudentLocalService(
        net.opentrends.training.service.studentLocalService studentLocalService) {
        this.studentLocalService = studentLocalService;
    }

    /**
     * Returns the student remote service.
     *
     * @return the student remote service
     */
    public net.opentrends.training.service.studentService getstudentService() {
        return studentService;
    }

    /**
     * Sets the student remote service.
     *
     * @param studentService the student remote service
     */
    public void setstudentService(
        net.opentrends.training.service.studentService studentService) {
        this.studentService = studentService;
    }

    /**
     * Returns the student persistence.
     *
     * @return the student persistence
     */
    public studentPersistence getstudentPersistence() {
        return studentPersistence;
    }

    /**
     * Sets the student persistence.
     *
     * @param studentPersistence the student persistence
     */
    public void setstudentPersistence(studentPersistence studentPersistence) {
        this.studentPersistence = studentPersistence;
    }

    /**
     * Returns the student finder.
     *
     * @return the student finder
     */
    public studentFinder getstudentFinder() {
        return studentFinder;
    }

    /**
     * Sets the student finder.
     *
     * @param studentFinder the student finder
     */
    public void setstudentFinder(studentFinder studentFinder) {
        this.studentFinder = studentFinder;
    }

    /**
     * Returns the student1 local service.
     *
     * @return the student1 local service
     */
    public net.opentrends.training.service.Student1LocalService getStudent1LocalService() {
        return student1LocalService;
    }

    /**
     * Sets the student1 local service.
     *
     * @param student1LocalService the student1 local service
     */
    public void setStudent1LocalService(
        net.opentrends.training.service.Student1LocalService student1LocalService) {
        this.student1LocalService = student1LocalService;
    }

    /**
     * Returns the student1 remote service.
     *
     * @return the student1 remote service
     */
    public net.opentrends.training.service.Student1Service getStudent1Service() {
        return student1Service;
    }

    /**
     * Sets the student1 remote service.
     *
     * @param student1Service the student1 remote service
     */
    public void setStudent1Service(
        net.opentrends.training.service.Student1Service student1Service) {
        this.student1Service = student1Service;
    }

    /**
     * Returns the student1 persistence.
     *
     * @return the student1 persistence
     */
    public Student1Persistence getStudent1Persistence() {
        return student1Persistence;
    }

    /**
     * Sets the student1 persistence.
     *
     * @param student1Persistence the student1 persistence
     */
    public void setStudent1Persistence(Student1Persistence student1Persistence) {
        this.student1Persistence = student1Persistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    /**
     * Returns the asset entry local service.
     *
     * @return the asset entry local service
     */
    public com.liferay.portlet.asset.service.AssetEntryLocalService getAssetEntryLocalService() {
        return assetEntryLocalService;
    }

    /**
     * Sets the asset entry local service.
     *
     * @param assetEntryLocalService the asset entry local service
     */
    public void setAssetEntryLocalService(
        com.liferay.portlet.asset.service.AssetEntryLocalService assetEntryLocalService) {
        this.assetEntryLocalService = assetEntryLocalService;
    }

    /**
     * Returns the asset entry remote service.
     *
     * @return the asset entry remote service
     */
    public com.liferay.portlet.asset.service.AssetEntryService getAssetEntryService() {
        return assetEntryService;
    }

    /**
     * Sets the asset entry remote service.
     *
     * @param assetEntryService the asset entry remote service
     */
    public void setAssetEntryService(
        com.liferay.portlet.asset.service.AssetEntryService assetEntryService) {
        this.assetEntryService = assetEntryService;
    }

    /**
     * Returns the asset entry persistence.
     *
     * @return the asset entry persistence
     */
    public AssetEntryPersistence getAssetEntryPersistence() {
        return assetEntryPersistence;
    }

    /**
     * Sets the asset entry persistence.
     *
     * @param assetEntryPersistence the asset entry persistence
     */
    public void setAssetEntryPersistence(
        AssetEntryPersistence assetEntryPersistence) {
        this.assetEntryPersistence = assetEntryPersistence;
    }

    /**
     * Returns the asset tag local service.
     *
     * @return the asset tag local service
     */
    public com.liferay.portlet.asset.service.AssetTagLocalService getAssetTagLocalService() {
        return assetTagLocalService;
    }

    /**
     * Sets the asset tag local service.
     *
     * @param assetTagLocalService the asset tag local service
     */
    public void setAssetTagLocalService(
        com.liferay.portlet.asset.service.AssetTagLocalService assetTagLocalService) {
        this.assetTagLocalService = assetTagLocalService;
    }

    /**
     * Returns the asset tag remote service.
     *
     * @return the asset tag remote service
     */
    public com.liferay.portlet.asset.service.AssetTagService getAssetTagService() {
        return assetTagService;
    }

    /**
     * Sets the asset tag remote service.
     *
     * @param assetTagService the asset tag remote service
     */
    public void setAssetTagService(
        com.liferay.portlet.asset.service.AssetTagService assetTagService) {
        this.assetTagService = assetTagService;
    }

    /**
     * Returns the asset tag persistence.
     *
     * @return the asset tag persistence
     */
    public AssetTagPersistence getAssetTagPersistence() {
        return assetTagPersistence;
    }

    /**
     * Sets the asset tag persistence.
     *
     * @param assetTagPersistence the asset tag persistence
     */
    public void setAssetTagPersistence(AssetTagPersistence assetTagPersistence) {
        this.assetTagPersistence = assetTagPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("net.opentrends.training.model.Foo",
            fooLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "net.opentrends.training.model.Foo");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Foo.class;
    }

    protected String getModelClassName() {
        return Foo.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = fooPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
