package net.opentrends.training.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.opentrends.training.model.Student1;
import net.opentrends.training.model.Student1Model;
import net.opentrends.training.model.Student1Soap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Student1 service. Represents a row in the &quot;sample_Student1&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.opentrends.training.model.Student1Model} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Student1Impl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see Student1Impl
 * @see net.opentrends.training.model.Student1
 * @see net.opentrends.training.model.Student1Model
 * @generated
 */
@JSON(strict = true)
public class Student1ModelImpl extends BaseModelImpl<Student1>
    implements Student1Model {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a student1 model instance should use the {@link net.opentrends.training.model.Student1} interface instead.
     */
    public static final String TABLE_NAME = "sample_Student1";
    public static final Object[][] TABLE_COLUMNS = {
            { "studentid", Types.BIGINT },
            { "fname", Types.VARCHAR },
            { "lname", Types.VARCHAR },
            { "age", Types.INTEGER },
            { "branch", Types.VARCHAR },
            { "email", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table sample_Student1 (studentid LONG not null primary key,fname VARCHAR(75) null,lname VARCHAR(75) null,age INTEGER,branch VARCHAR(75) null,email VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table sample_Student1";
    public static final String ORDER_BY_JPQL = " ORDER BY student1.studentid ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sample_Student1.studentid ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.net.opentrends.training.model.Student1"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.net.opentrends.training.model.Student1"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.net.opentrends.training.model.Student1"));
    private static ClassLoader _classLoader = Student1.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Student1.class
        };
    private long _studentid;
    private String _fname;
    private String _lname;
    private int _age;
    private String _branch;
    private String _email;
    private Student1 _escapedModel;

    public Student1ModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Student1 toModel(Student1Soap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Student1 model = new Student1Impl();

        model.setStudentid(soapModel.getStudentid());
        model.setFname(soapModel.getFname());
        model.setLname(soapModel.getLname());
        model.setAge(soapModel.getAge());
        model.setBranch(soapModel.getBranch());
        model.setEmail(soapModel.getEmail());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Student1> toModels(Student1Soap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Student1> models = new ArrayList<Student1>(soapModels.length);

        for (Student1Soap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _studentid;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setStudentid(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _studentid;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Student1.class;
    }

    @Override
    public String getModelClassName() {
        return Student1.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("studentid", getStudentid());
        attributes.put("fname", getFname());
        attributes.put("lname", getLname());
        attributes.put("age", getAge());
        attributes.put("branch", getBranch());
        attributes.put("email", getEmail());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long studentid = (Long) attributes.get("studentid");

        if (studentid != null) {
            setStudentid(studentid);
        }

        String fname = (String) attributes.get("fname");

        if (fname != null) {
            setFname(fname);
        }

        String lname = (String) attributes.get("lname");

        if (lname != null) {
            setLname(lname);
        }

        Integer age = (Integer) attributes.get("age");

        if (age != null) {
            setAge(age);
        }

        String branch = (String) attributes.get("branch");

        if (branch != null) {
            setBranch(branch);
        }

        String email = (String) attributes.get("email");

        if (email != null) {
            setEmail(email);
        }
    }

    @JSON
    @Override
    public long getStudentid() {
        return _studentid;
    }

    @Override
    public void setStudentid(long studentid) {
        _studentid = studentid;
    }

    @JSON
    @Override
    public String getFname() {
        if (_fname == null) {
            return StringPool.BLANK;
        } else {
            return _fname;
        }
    }

    @Override
    public void setFname(String fname) {
        _fname = fname;
    }

    @JSON
    @Override
    public String getLname() {
        if (_lname == null) {
            return StringPool.BLANK;
        } else {
            return _lname;
        }
    }

    @Override
    public void setLname(String lname) {
        _lname = lname;
    }

    @JSON
    @Override
    public int getAge() {
        return _age;
    }

    @Override
    public void setAge(int age) {
        _age = age;
    }

    @JSON
    @Override
    public String getBranch() {
        if (_branch == null) {
            return StringPool.BLANK;
        } else {
            return _branch;
        }
    }

    @Override
    public void setBranch(String branch) {
        _branch = branch;
    }

    @JSON
    @Override
    public String getEmail() {
        if (_email == null) {
            return StringPool.BLANK;
        } else {
            return _email;
        }
    }

    @Override
    public void setEmail(String email) {
        _email = email;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Student1.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Student1 toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Student1) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        Student1Impl student1Impl = new Student1Impl();

        student1Impl.setStudentid(getStudentid());
        student1Impl.setFname(getFname());
        student1Impl.setLname(getLname());
        student1Impl.setAge(getAge());
        student1Impl.setBranch(getBranch());
        student1Impl.setEmail(getEmail());

        student1Impl.resetOriginalValues();

        return student1Impl;
    }

    @Override
    public int compareTo(Student1 student1) {
        long primaryKey = student1.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Student1)) {
            return false;
        }

        Student1 student1 = (Student1) obj;

        long primaryKey = student1.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Student1> toCacheModel() {
        Student1CacheModel student1CacheModel = new Student1CacheModel();

        student1CacheModel.studentid = getStudentid();

        student1CacheModel.fname = getFname();

        String fname = student1CacheModel.fname;

        if ((fname != null) && (fname.length() == 0)) {
            student1CacheModel.fname = null;
        }

        student1CacheModel.lname = getLname();

        String lname = student1CacheModel.lname;

        if ((lname != null) && (lname.length() == 0)) {
            student1CacheModel.lname = null;
        }

        student1CacheModel.age = getAge();

        student1CacheModel.branch = getBranch();

        String branch = student1CacheModel.branch;

        if ((branch != null) && (branch.length() == 0)) {
            student1CacheModel.branch = null;
        }

        student1CacheModel.email = getEmail();

        String email = student1CacheModel.email;

        if ((email != null) && (email.length() == 0)) {
            student1CacheModel.email = null;
        }

        return student1CacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{studentid=");
        sb.append(getStudentid());
        sb.append(", fname=");
        sb.append(getFname());
        sb.append(", lname=");
        sb.append(getLname());
        sb.append(", age=");
        sb.append(getAge());
        sb.append(", branch=");
        sb.append(getBranch());
        sb.append(", email=");
        sb.append(getEmail());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("net.opentrends.training.model.Student1");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>studentid</column-name><column-value><![CDATA[");
        sb.append(getStudentid());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fname</column-name><column-value><![CDATA[");
        sb.append(getFname());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lname</column-name><column-value><![CDATA[");
        sb.append(getLname());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>age</column-name><column-value><![CDATA[");
        sb.append(getAge());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>branch</column-name><column-value><![CDATA[");
        sb.append(getBranch());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>email</column-name><column-value><![CDATA[");
        sb.append(getEmail());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
