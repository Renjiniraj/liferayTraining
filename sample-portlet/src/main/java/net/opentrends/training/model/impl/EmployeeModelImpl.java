package net.opentrends.training.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.opentrends.training.model.Employee;
import net.opentrends.training.model.EmployeeModel;
import net.opentrends.training.model.EmployeeSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Employee service. Represents a row in the &quot;sample_Employee&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.opentrends.training.model.EmployeeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeImpl
 * @see net.opentrends.training.model.Employee
 * @see net.opentrends.training.model.EmployeeModel
 * @generated
 */
@JSON(strict = true)
public class EmployeeModelImpl extends BaseModelImpl<Employee>
    implements EmployeeModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a employee model instance should use the {@link net.opentrends.training.model.Employee} interface instead.
     */
    public static final String TABLE_NAME = "sample_Employee";
    public static final Object[][] TABLE_COLUMNS = {
            { "empId", Types.BIGINT },
            { "employeeName", Types.VARCHAR },
            { "age", Types.INTEGER },
            { "salary", Types.BIGINT },
            { "fileEntryId", Types.BIGINT },
            { "unit", Types.VARCHAR },
            { "groupId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table sample_Employee (empId LONG not null primary key,employeeName VARCHAR(75) null,age INTEGER,salary LONG,fileEntryId LONG,unit VARCHAR(75) null,groupId LONG)";
    public static final String TABLE_SQL_DROP = "drop table sample_Employee";
    public static final String ORDER_BY_JPQL = " ORDER BY employee.empId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY sample_Employee.empId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.net.opentrends.training.model.Employee"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.net.opentrends.training.model.Employee"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.net.opentrends.training.model.Employee"));
    private static ClassLoader _classLoader = Employee.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Employee.class
        };
    private long _empId;
    private String _employeeName;
    private int _age;
    private long _salary;
    private long _fileEntryId;
    private String _unit;
    private long _groupId;
    private Employee _escapedModel;

    public EmployeeModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Employee toModel(EmployeeSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Employee model = new EmployeeImpl();

        model.setEmpId(soapModel.getEmpId());
        model.setEmployeeName(soapModel.getEmployeeName());
        model.setAge(soapModel.getAge());
        model.setSalary(soapModel.getSalary());
        model.setFileEntryId(soapModel.getFileEntryId());
        model.setUnit(soapModel.getUnit());
        model.setGroupId(soapModel.getGroupId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Employee> toModels(EmployeeSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Employee> models = new ArrayList<Employee>(soapModels.length);

        for (EmployeeSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _empId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEmpId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _empId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Employee.class;
    }

    @Override
    public String getModelClassName() {
        return Employee.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("empId", getEmpId());
        attributes.put("employeeName", getEmployeeName());
        attributes.put("age", getAge());
        attributes.put("salary", getSalary());
        attributes.put("fileEntryId", getFileEntryId());
        attributes.put("unit", getUnit());
        attributes.put("groupId", getGroupId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long empId = (Long) attributes.get("empId");

        if (empId != null) {
            setEmpId(empId);
        }

        String employeeName = (String) attributes.get("employeeName");

        if (employeeName != null) {
            setEmployeeName(employeeName);
        }

        Integer age = (Integer) attributes.get("age");

        if (age != null) {
            setAge(age);
        }

        Long salary = (Long) attributes.get("salary");

        if (salary != null) {
            setSalary(salary);
        }

        Long fileEntryId = (Long) attributes.get("fileEntryId");

        if (fileEntryId != null) {
            setFileEntryId(fileEntryId);
        }

        String unit = (String) attributes.get("unit");

        if (unit != null) {
            setUnit(unit);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }
    }

    @JSON
    @Override
    public long getEmpId() {
        return _empId;
    }

    @Override
    public void setEmpId(long empId) {
        _empId = empId;
    }

    @JSON
    @Override
    public String getEmployeeName() {
        if (_employeeName == null) {
            return StringPool.BLANK;
        } else {
            return _employeeName;
        }
    }

    @Override
    public void setEmployeeName(String employeeName) {
        _employeeName = employeeName;
    }

    @JSON
    @Override
    public int getAge() {
        return _age;
    }

    @Override
    public void setAge(int age) {
        _age = age;
    }

    @JSON
    @Override
    public long getSalary() {
        return _salary;
    }

    @Override
    public void setSalary(long salary) {
        _salary = salary;
    }

    @JSON
    @Override
    public long getFileEntryId() {
        return _fileEntryId;
    }

    @Override
    public void setFileEntryId(long fileEntryId) {
        _fileEntryId = fileEntryId;
    }

    @JSON
    @Override
    public String getUnit() {
        if (_unit == null) {
            return StringPool.BLANK;
        } else {
            return _unit;
        }
    }

    @Override
    public void setUnit(String unit) {
        _unit = unit;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Employee.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Employee toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Employee) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EmployeeImpl employeeImpl = new EmployeeImpl();

        employeeImpl.setEmpId(getEmpId());
        employeeImpl.setEmployeeName(getEmployeeName());
        employeeImpl.setAge(getAge());
        employeeImpl.setSalary(getSalary());
        employeeImpl.setFileEntryId(getFileEntryId());
        employeeImpl.setUnit(getUnit());
        employeeImpl.setGroupId(getGroupId());

        employeeImpl.resetOriginalValues();

        return employeeImpl;
    }

    @Override
    public int compareTo(Employee employee) {
        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Employee)) {
            return false;
        }

        Employee employee = (Employee) obj;

        long primaryKey = employee.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Employee> toCacheModel() {
        EmployeeCacheModel employeeCacheModel = new EmployeeCacheModel();

        employeeCacheModel.empId = getEmpId();

        employeeCacheModel.employeeName = getEmployeeName();

        String employeeName = employeeCacheModel.employeeName;

        if ((employeeName != null) && (employeeName.length() == 0)) {
            employeeCacheModel.employeeName = null;
        }

        employeeCacheModel.age = getAge();

        employeeCacheModel.salary = getSalary();

        employeeCacheModel.fileEntryId = getFileEntryId();

        employeeCacheModel.unit = getUnit();

        String unit = employeeCacheModel.unit;

        if ((unit != null) && (unit.length() == 0)) {
            employeeCacheModel.unit = null;
        }

        employeeCacheModel.groupId = getGroupId();

        return employeeCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{empId=");
        sb.append(getEmpId());
        sb.append(", employeeName=");
        sb.append(getEmployeeName());
        sb.append(", age=");
        sb.append(getAge());
        sb.append(", salary=");
        sb.append(getSalary());
        sb.append(", fileEntryId=");
        sb.append(getFileEntryId());
        sb.append(", unit=");
        sb.append(getUnit());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("net.opentrends.training.model.Employee");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>empId</column-name><column-value><![CDATA[");
        sb.append(getEmpId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeeName</column-name><column-value><![CDATA[");
        sb.append(getEmployeeName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>age</column-name><column-value><![CDATA[");
        sb.append(getAge());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salary</column-name><column-value><![CDATA[");
        sb.append(getSalary());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
        sb.append(getFileEntryId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>unit</column-name><column-value><![CDATA[");
        sb.append(getUnit());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
